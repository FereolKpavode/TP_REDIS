import streamlit as st
from redis.cluster import RedisCluster, ClusterNode
import matplotlib.pyplot as plt

st.set_page_config(page_title="Cl√©s Redis Cluster", layout="centered")
st.title("üîó R√©partition des cl√©s dans Redis Cluster")

# Connexion Redis Cluster
startup_nodes = [ClusterNode("127.0.0.1", 7001)]
rc = RedisCluster(startup_nodes=startup_nodes, decode_responses=True, skip_full_coverage_check=True)

# Saisie du nombre de cl√©s √† ins√©rer
nb_cles = st.number_input("üì• Nombre de cl√©s √† ins√©rer", min_value=1, max_value=1000, value=100, step=10)

if st.button("üöÄ Ins√©rer les cl√©s dans le cluster"):
    for i in range(1, nb_cles + 1):
        key = f"user:{i}"
        value = f"User{i}"
        rc.set(key, value)
    st.success(f"‚úÖ {nb_cles} cl√©s ins√©r√©es dans le cluster.")

# Calcul de la r√©partition
nodes_by_node = {}
for i in range(1, nb_cles + 1):
    key = f"user:{i}"
    try:
        node = rc.get_node_from_key(key)
        node_info = f"{node.host}:{node.port}"
        nodes_by_node.setdefault(node_info, []).append(key)
    except Exception as e:
        st.error(f"Erreur pour la cl√© {key} : {e}")

# Affichage de la r√©partition
if nodes_by_node:
    st.subheader("üìä R√©partition des cl√©s par n≈ìud")
    for node, keys in nodes_by_node.items():
        st.write(f"üß† N≈ìud `{node}` contient **{len(keys)}** cl√©s.")

    # Graphique camembert
    labels = list(nodes_by_node.keys())
    sizes = [len(keys) for keys in nodes_by_node.values()]

    fig, ax = plt.subplots(figsize=(7, 5))
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
    ax.set_title("R√©partition des cl√©s par n≈ìud Redis Cluster")
    ax.axis('equal')

    st.pyplot(fig)
else:
    st.info("‚ÑπÔ∏è Aucune cl√© trouv√©e. Cliquez sur le bouton pour ins√©rer des cl√©s.")
